/**
 * This Jenkinsfile builds Theia Next across the major OS platforms
 */
import groovy.json.JsonSlurper

distFolder = "applications/electron/dist"

pipeline {
    agent none
    triggers { cron('@daily') }
    options {
        timeout(time: 5, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    stages {
        stage('Build') {
            parallel {
                stage('Linux Theia@Next') {
                    agent {
                        kubernetes {
                            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: theia-dev
    image: eclipsetheia/theia-blueprint:builder
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    resources:
      limits:
        memory: "8Gi"
        cpu: "2"
      requests:
        memory: "8Gi"
        cpu: "2"
    volumeMounts:
    - name: global-cache
      mountPath: /.cache
    - name: global-yarn
      mountPath: /.yarn      
    - name: global-npm
      mountPath: /.npm      
    - name: electron-cache
      mountPath: /.electron-gyp
  volumes:
  - name: global-cache
    emptyDir: {}
  - name: global-yarn
    emptyDir: {}
  - name: global-npm
    emptyDir: {}
  - name: electron-cache
    emptyDir: {}
"""
                        }
                    }
                    steps {
                        container('theia-dev') {
                            withCredentials([string(credentialsId: "github-bot-token", variable: 'GITHUB_TOKEN')]) {
                                script {
                                    /* we have a fresh pod so npm registry is set as expected */
                                    buildNext('linux')
                                }
                            }
                        }
                    }
                    post {
                        failure {
                            error("Linux installer creation failed, aborting...")
                        }
                    }
                }
                stage('Mac Theia@Next') {
                    agent {
                        label 'macos'
                    }
                    steps {
                        script {
                            /* make sure that registry.npmjs.org is the default registry before and after the usage of the local registry */
                            sh "npm config set registry https://registry.npmjs.org/"
                            buildNext('mac')
                        }
                    }
                    post {
                        failure {
                            sh "npm config set registry https://registry.npmjs.org/"
                            error("Mac installer creation failed, aborting...")
                        }
                        always {
                            sh "npm config set registry https://registry.npmjs.org/"
                        }
                    }
                }
                stage('Windows Theia@Next') {
                    agent {
                        label 'windows'
                    }
                    steps {
                        script {
                            /* make sure that registry.npmjs.org is the default registry before and after the usage of the local registry */
                            sh "npm config set registry https://registry.npmjs.org/"
                            sh "npm config set msvs_version 2017"
                            sh "npx node-gyp@9.4.0 install 14.20.0"
                            buildNext('windows')
                        }
                    }
                    post {
                        failure {
                            sh "npm config set registry https://registry.npmjs.org/"
                            error("Windows installer creation failed, aborting...")
                        }
                        always {
                            sh "npm config set registry https://registry.npmjs.org/"
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            echo "Build result FAILURE: Send email notification to jfaltermeier@eclipsesource.com"
            emailext attachLog: true,
            body: 'Job: ${JOB_NAME}<br>Build Number: ${BUILD_NUMBER}<br>Build URL: ${BUILD_URL}',
            mimeType: 'text/html', subject: 'Build ${JOB_NAME} (#${BUILD_NUMBER}) FAILURE', to: 'jfaltermeier@eclipsesource.com'
        }
        unstable {
            echo "Build result UNSTABLE: Send email notification to jfaltermeier@eclipsesource.com"
            emailext attachLog: true,
            body: 'Job: ${JOB_NAME}<br>Build Number: ${BUILD_NUMBER}<br>Build URL: ${BUILD_URL}',
            mimeType: 'text/html', subject: 'Build ${JOB_NAME} (#${BUILD_NUMBER}) UNSTABLE', to: 'jfaltermeier@eclipsesource.com'
        }
    }
}

def buildNext(String os) {
    def VERDACCIO_CONFIG = ""
    def VERDACCIO_UPDATE_CONFIG_SCRIPT  = ""
    def VERDACCIO_STOP_SCRIPT = ""

    if (os == 'mac') {
        echo "mac"
        VERDACCIO_CONFIG = """/Users/genie.theia/.config/verdaccio/config.yaml"""
        VERDACCIO_UPDATE_CONFIG_SCRIPT = """sed -i -e s/\\\$authenticated/\\\$anonymous/g /Users/genie.theia/.config/verdaccio/config.yaml"""
        VERDACCIO_STOP_SCRIPT = """pkill -x Verdaccio"""
    } 
    else if (os == 'windows') {
        VERDACCIO_CONFIG = """C:\\Users\\genie.theia\\AppData\\Roaming\\verdaccio\\config.yaml"""
        VERDACCIO_UPDATE_CONFIG_SCRIPT = """sed -i -e s/\\\$authenticated/\\\$anonymous/g C:\\Users\\genie.theia\\AppData\\Roaming\\verdaccio\\config.yaml"""
        // VERDACCIO_STOP_SCRIPT = """cmd /c taskkill /F /IM Verdaccio"""
        VERDACCIO_STOP_SCRIPT = """cmd /c tasklist"""
    } 
    else {
        echo "else"
        VERDACCIO_CONFIG = """${env.WORKSPACE}/verdaccio/verdaccio/config.yaml"""
        VERDACCIO_UPDATE_CONFIG_SCRIPT = """sed -i -e s/\\\$authenticated/\\\$anonymous/g ${env.WORKSPACE}/verdaccio/verdaccio/config.yaml"""
        VERDACCIO_STOP_SCRIPT = """pkill -x Verdaccio"""
    }

    sh "git config user.email \"not@real.user\""
    sh "git config user.name \"Not a real user\""
    sh "node --version"

    cleanWs()
    checkout scm
    sh "git clone https://github.com/eclipse-theia/theia.git"

    sh """
        # print used cerdaccio paths
        echo VERDACCIO_UPDATE_CONFIG_SCRIPT: ${VERDACCIO_UPDATE_CONFIG_SCRIPT}
        echo VERDACCIO_CONFIG: ${VERDACCIO_CONFIG}
        echo VERDACCIO_STOP_SCRIPT: ${VERDACCIO_STOP_SCRIPT}

        # prepare cache location in workspace that can be cleared
        mkdir cache
        export LOCAL_CACHE_PATH=\${PWD}/cache
        export npm_config_cache=\$LOCAL_CACHE_PATH
        echo \$LOCAL_CACHE_PATH

        # install verdaccio and prepare env
        mkdir verdaccio
        export VERDACCIO_STORAGE_PATH=\${PWD}/verdaccio
        echo \$VERDACCIO_STORAGE_PATH
        cd verdaccio
        touch .npmrc
        # create a local node_modules directory where we can install verdaccio non-globally
        mkdir node_modules
        npm install verdaccio
        REGISTRY=http://0.0.0.0:4873/

        # Kill any remaining Verdaccio executables and start verdaccio
        ${VERDACCIO_STOP_SCRIPT} || true
        node_modules/.bin/verdaccio &

        # Stop verdaccio again and patch the default config that was created by the initial start
        # We want to allow anonymous pushes to our local registry
        sleep 20 && ${VERDACCIO_STOP_SCRIPT} && sleep 20
        ${VERDACCIO_UPDATE_CONFIG_SCRIPT}
        cat ${VERDACCIO_CONFIG}

        # Start verdaccio again
        node_modules/.bin/verdaccio &

        # Build theia. Local verdaccio registry is acting a proxy to the main npm registry
        cd ../theia
        touch .npmrc
        echo "registry=http://0.0.0.0:4873/" >> .npmrc
        yarn
        yarn build

        # Publish next version of Theia to verdaccio
        yarn lerna publish preminor --exact --canary --preid next --dist-tag next --no-git-reset --no-git-tag-version --no-push --yes --registry \$REGISTRY

        # Build Blueprint Next with verdaccio registry
        cd ..
        yarn && yarn update:next
        yarn --registry http://0.0.0.0:4873/
        yarn build && yarn download:plugins && yarn electron package

        # Stop verdaccio after successful build
        pkill -x Verdaccio

        # print contents of verdaccio storage path to verify this path was honoured by verdaccio
        ls -al \$VERDACCIO_STORAGE_PATH
    """
}
